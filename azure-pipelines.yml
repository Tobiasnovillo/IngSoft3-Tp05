trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Node_Version: '20.x'
  azureSubscription: 'azure-tp05-connection'

stages:
# ======================================================
# üß± BUILD STAGE ‚Äì Construye backend una vez y frontend para QA y PROD por separado
# ======================================================
- stage: Build
  displayName: "Build Frontend (QA & PROD) + Backend"
  jobs:
  - job: BuildJob
    displayName: "Build artifacts"
    variables:
      - group: minishop-qa     # Usamos QA por default para tener AZURE_WEBAPP_*; luego sobreescribimos URL de PROD manualmente
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'

    - script: |
        echo "üì¶ Instalando dependencias..."
        npm ci
        npm run install-all
      displayName: "Install root deps"

    # ======================================================
    # üß™ UNIT TESTS (Backend + Frontend)
    # ======================================================
    - script: |
        echo "üß™ Ejecutando pruebas unitarias del backend..."
        cd server
        npm ci
        npm test
        echo "‚úÖ Backend tests completados"

        echo "üß™ Ejecutando pruebas unitarias del frontend..."
        cd ../client
        npm ci
        npm test
        echo "‚úÖ Frontend tests completados"
      displayName: "Run Unit Tests (Backend + Frontend)"
      continueOnError: false  # ‚ùå Si alg√∫n test falla, el pipeline se detiene

    # (opcional) publicar resultados de tests en Azure DevOps
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/junit-*.xml'
        testRunTitle: 'MiniShop Unit Tests'
      condition: succeededOrFailed()

    # ======================================================
    # üß± BUILD FRONTEND QA
    # ======================================================
    - script: |
        echo "üßπ Limpiando build previo..."
        rm -rf client/build

        echo "üåê [QA] REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
        cd client
        export REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)
        npm run build
        cd ..

        echo "üì¶ Empaquetando client-qa.zip"
      displayName: "Build frontend QA"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'client/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/client-qa.zip'
        replaceExistingArchive: true

    # ======================================================
    # üß± BUILD FRONTEND PROD
    # ======================================================
    - script: |
        echo "üßπ Limpiando build previo..."
        rm -rf client/build

        # ‚öôÔ∏è Ajust√° esta l√≠nea si tu backend PROD tiene otro nombre:
        export REACT_APP_API_BASE_URL="https://myshop1apiprod.azurewebsites.net/api"
        echo "üåê [PROD] REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL"

        cd client
        npm run build
        cd ..

        echo "üì¶ Empaquetando client-prod.zip"
      displayName: "Build frontend PROD (URL expl√≠cita)"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'client/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/client-prod.zip'
        replaceExistingArchive: true

    # ======================================================
    # üß± BUILD BACKEND
    # ======================================================
    - script: |
        echo "üßπ Eliminando SQLite locales antes de empaquetar..."
        find server -name "database.sqlite" -type f -delete || true
        find server -name "*.db" -type f -delete || true
      displayName: "Clean SQLite files before packaging"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'server'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true
        excludePatterns: |
          database.sqlite
          **/database.sqlite
          **/*.db

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: 'drop'

# ======================================================
# üß™ QA STAGE ‚Äì Deploy QA
# ======================================================
- stage: QA
  displayName: "Deploy to QA"
  dependsOn: Build
  variables:
    - group: minishop-qa
  jobs:
  - deployment: DeployQA
    displayName: "Deploy QA"
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - script: |
              echo "üåç QA REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
            displayName: "Mostrar API QA antes del deploy"

          # üîß Backend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # üé® Frontend QA (usa client-qa.zip)
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client-qa.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'

# ======================================================
# üöÄ PROD STAGE ‚Äì Deploy Producci√≥n
# ======================================================
- stage: PROD
  displayName: "Deploy to Production"
  dependsOn: QA
  variables:
    - group: minishop-prod
  jobs:
  - deployment: DeployPROD
    displayName: "Deploy PROD"
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - script: |
              echo "üåç PROD REACT_APP_API_BASE_URL deber√≠a ser https://myshop1apiprod.azurewebsites.net/api"
            displayName: "Mostrar API PROD esperada"

          # üîß Backend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # üé® Frontend PROD (usa client-prod.zip)
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client-prod.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'
