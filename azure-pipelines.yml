trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Node_Version: '20.x'
  azureSubscription: 'azure-tp05-connection'

# ======================================================
# üß± BUILD STAGE ‚Äì Construcci√≥n Frontend + Backend
# ======================================================
stages:
- stage: Build
  displayName: "Build Frontend + Backend"
  variables:
    - group: minishop-qa
  jobs:
  - job: BuildJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'

    - script: |
        echo "üì¶ Instalando dependencias..."
        npm ci
        npm run install-all

        echo "üßπ Limpiando build previo del frontend..."
        rm -rf client/build

        cd client
        echo "üåê Usando REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
        export REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)
        npm run build
        cd ..
      displayName: "Build frontend limpio con variable QA"

    - script: |
        echo "üßπ Eliminando base local antes del empaquetado..."
        find server -name "database.sqlite" -type f -delete || true
        find server -name "*.db" -type f -delete || true
        echo "‚úÖ Base de datos eliminada antes del zip"
      displayName: "Clean SQLite files before packaging"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'server'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true
        excludePatterns: |
          database.sqlite
          **/database.sqlite
          */database.sqlite
          **/*.db
          */*.db

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'client/build'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/client.zip'

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: 'drop'


# ======================================================
# üß™ QA STAGE ‚Äì Deploy QA
# ======================================================
- stage: QA
  displayName: "Deploy to QA"
  dependsOn: Build
  variables:
    - group: minishop-qa
  jobs:
  - deployment: DeployQA
    displayName: "Deploy QA"
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - script: |
              echo "üåç Verificando variable antes del deploy QA"
              echo "REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
            displayName: "Mostrar API QA antes del deploy"

          # üîß Backend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # üé® Frontend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'


# ======================================================
# üöÄ PROD STAGE ‚Äì Deploy Producci√≥n
# ======================================================
- stage: PROD
  displayName: "Deploy to Production"
  dependsOn: QA
  variables:
    - group: minishop-prod
  jobs:
  - deployment: DeployPROD
    displayName: "Deploy PROD"
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - script: |
              echo "üåç Verificando variable antes del deploy PROD"
              echo "REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
            displayName: "Mostrar API PROD antes del deploy"

          # üîß Backend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # üé® Frontend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'
