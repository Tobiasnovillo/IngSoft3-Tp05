# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'

# variables:
#   Node_Version: '20.x'
#   azureSubscription: 'azure-tp05-connection'

# # ======================================================
# # üß± BUILD STAGE ‚Äì Construcci√≥n Frontend + Backend
# # ======================================================
# stages:
# - stage: Build
#   displayName: "Build Frontend + Backend"
#   variables:
#     - group: minishop-qa
#   jobs:
#   - job: BuildJob
#     steps:
#     - task: NodeTool@0
#       inputs:
#         versionSpec: '20.x'

#     - script: |
#         echo "üì¶ Instalando dependencias..."
#         npm ci
#         npm run install-all
#         cd client
#         echo "üåê Usando REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
#         export REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)
#         npm run build
#         cd ..
#       displayName: "Build frontend con variable QA"

#     - task: ArchiveFiles@2
#       inputs:
#         rootFolderOrFile: 'server'
#         includeRootFolder: false
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'

#     - task: ArchiveFiles@2
#       inputs:
#         rootFolderOrFile: 'client/build'
#         includeRootFolder: true
#         archiveType: 'zip'
#         archiveFile: '$(Build.ArtifactStagingDirectory)/client.zip'

#     - publish: '$(Build.ArtifactStagingDirectory)'
#       artifact: 'drop'


# # ======================================================
# # üß™ QA STAGE ‚Äì Deploy QA
# # ======================================================
# - stage: QA
#   displayName: "Deploy to QA"
#   dependsOn: Build
#   variables:
#     - group: minishop-qa
#   jobs:
#   - deployment: DeployQA
#     displayName: "Deploy QA"
#     environment: 'QA'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop

#           # üîß Backend QA
#           - task: AzureWebApp@1
#             displayName: "üöÄ Deploy backend QA"
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: 'webAppLinux'
#               appName: '$(AZURE_WEBAPP_API_NAME)'
#               package: '$(Pipeline.Workspace)/drop/server.zip'
#               startUpCommand: 'npm start'
#               runtimeStack: 'NODE|20-lts'

#           # üé® Frontend QA
#           - task: AzureWebApp@1
#             displayName: "üöÄ Deploy frontend QA"
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: 'webAppLinux'
#               appName: '$(AZURE_WEBAPP_FRONT_NAME)'
#               package: '$(Pipeline.Workspace)/drop/client.zip'
#               startUpCommand: 'npx serve -s build -l 8080'
#               runtimeStack: 'NODE|20-lts'

# # ======================================================
# # üöÄ PROD STAGE ‚Äì Deploy Producci√≥n
# # ======================================================
# - stage: PROD
#   displayName: "Deploy to Production"
#   dependsOn: QA
#   variables:
#     - group: minishop-prod
#   jobs:
#   - deployment: DeployPROD
#     displayName: "Deploy PROD"
#     environment: 'PROD'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: drop

#           # üîß Backend PROD
#           - task: AzureWebApp@1
#             displayName: "üöÄ Deploy backend PROD"
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: 'webAppLinux'
#               appName: '$(AZURE_WEBAPP_API_NAME)'
#               package: '$(Pipeline.Workspace)/drop/server.zip'
#               startUpCommand: 'npm start'
#               runtimeStack: 'NODE|20-lts'

#           # üé® Frontend PROD
#           - task: AzureWebApp@1
#             displayName: "üöÄ Deploy frontend PROD"
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               appType: 'webAppLinux'
#               appName: '$(AZURE_WEBAPP_FRONT_NAME)'
#               package: '$(Pipeline.Workspace)/drop/client.zip'
#               startUpCommand: 'npx serve -s build -l 8080'
#               runtimeStack: 'NODE|20-lts'
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Node_Version: '20.x'
  azureSubscription: 'azure-tp05-connection'

# ======================================================
# üß± BUILD STAGE ‚Äì Construcci√≥n Frontend + Backend
# ======================================================
stages:
- stage: Build
  displayName: "Build Frontend + Backend"
  variables:
    - group: minishop-qa
  jobs:
  - job: BuildJob
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'

    - script: |
        echo "üì¶ Instalando dependencias..."
        npm ci
        npm run install-all
        cd client
        echo "üåê Usando REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
        export REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)
        npm run build
        cd ..
      displayName: "Build frontend con variable QA"

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'server'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
        replaceExistingArchive: true
        excludepatterns: |
        **/database.sqlite
        **/*.db

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'client/build'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/client.zip'

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: 'drop'


# ======================================================
# üß™ QA STAGE ‚Äì Deploy QA
# ======================================================
- stage: QA
  displayName: "Deploy to QA"
  dependsOn: Build
  variables:
    - group: minishop-qa
  jobs:
  - deployment: DeployQA
    displayName: "Deploy QA"
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          # üîß Backend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # ‚úÖ Health check Backend QA
          - bash: |
              set -e
              API_URL="https://$(AZURE_WEBAPP_API_NAME).azurewebsites.net/health"
              echo "ü©∫ Verificando salud del backend QA en $API_URL"
              for i in {1..30}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || true)
                if [ "$code" = "200" ]; then
                  echo "‚úÖ Backend QA saludable"
                  exit 0
                fi
                echo "‚è≥ Backend no listo (HTTP $code). Reintento $i/30"
                sleep 5
              done
              echo "‚ùå Health check backend fall√≥"
              exit 1
            displayName: "Health check Backend QA"

          # üé® Frontend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'

          # ‚úÖ Health check Frontend QA
          - bash: |
              set -e
              FRONT_URL="https://$(AZURE_WEBAPP_FRONT_NAME).azurewebsites.net"
              echo "ü©∫ Verificando salud del frontend QA en $FRONT_URL"
              for i in {1..30}; do
                code=$(curl -s -o /tmp/page.html -w "%{http_code}" "$FRONT_URL" || true)
                if [ "$code" = "200" ] && grep -qi "MiniShop" /tmp/page.html; then
                  echo "‚úÖ Frontend QA saludable"
                  exit 0
                fi
                echo "‚è≥ Frontend no listo (HTTP $code). Reintento $i/30"
                sleep 5
              done
              echo "‚ùå Health check frontend fall√≥"
              exit 1
            displayName: "Health check Frontend QA"


# ======================================================
# üöÄ PROD STAGE ‚Äì Deploy Producci√≥n
# ======================================================
- stage: PROD
  displayName: "Deploy to Production"
  dependsOn: QA
  variables:
    - group: minishop-prod
  jobs:
  - deployment: DeployPROD
    displayName: "Deploy PROD"
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          # üîß Backend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # ‚úÖ Health check Backend PROD
          - bash: |
              set -e
              API_URL="https://$(AZURE_WEBAPP_API_NAME).azurewebsites.net/health"
              echo "ü©∫ Verificando salud del backend PROD en $API_URL"
              for i in {1..30}; do
                code=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" || true)
                if [ "$code" = "200" ]; then
                  echo "‚úÖ Backend PROD saludable"
                  exit 0
                fi
                echo "‚è≥ Backend no listo (HTTP $code). Reintento $i/30"
                sleep 5
              done
              echo "‚ùå Health check backend fall√≥"
              exit 1
            displayName: "Health check Backend PROD"

          # üé® Frontend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'

          # ‚úÖ Health check Frontend PROD
          - bash: |
              set -e
              FRONT_URL="https://$(AZURE_WEBAPP_FRONT_NAME).azurewebsites.net"
              echo "ü©∫ Verificando salud del frontend PROD en $FRONT_URL"
              for i in {1..30}; do
                code=$(curl -s -o /tmp/page.html -w "%{http_code}" "$FRONT_URL" || true)
                if [ "$code" = "200" ] && grep -qi "MiniShop" /tmp/page.html; then
                  echo "‚úÖ Frontend PROD saludable"
                  exit 0
                fi
                echo "‚è≥ Frontend no listo (HTTP $code). Reintento $i/30"
                sleep 5
              done
              echo "‚ùå Health check frontend fall√≥"
              exit 1
            displayName: "Health check Frontend PROD"
