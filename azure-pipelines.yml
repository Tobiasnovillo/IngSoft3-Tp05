trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  Node_Version: '20.x'
  azureSubscription: 'azure-tp05-connection'

# ======================================================
# üß± BUILD STAGE ‚Äì Construcci√≥n Frontend + Backend
# ======================================================
stages:
- stage: Build
  displayName: "Build Frontend + Backend"
  jobs:
  - job: BuildJob
    displayName: "Build Job"
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '$(Node_Version)'

    - script: |
        echo "üì¶ Instalando dependencias ra√≠z..."
        npm ci
        npm run install-all

        echo "‚öôÔ∏è Build frontend con variable REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)"
        cd client
        export REACT_APP_API_BASE_URL=$(REACT_APP_API_BASE_URL)
        npm run build
        cd ..

      displayName: "Build frontend + backend"

    # Empaquetar backend
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'server'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/server.zip'
      displayName: "üì¶ Package backend"

    # Empaquetar frontend
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: 'client/build'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/client.zip'
      displayName: "üì¶ Package frontend"

    # Publicar artefactos
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: 'drop'
      displayName: "Publicar artefactos de build"

# ======================================================
# üß™ QA STAGE ‚Äì Deploy QA
# ======================================================
- stage: QA
  displayName: "Deploy to QA"
  dependsOn: Build
  variables:
    - group: minishop-qa
  jobs:
  - deployment: DeployQA
    displayName: "Deploy QA"
    environment: 'QA'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          # üîß Backend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # üé® Frontend QA
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend QA"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'

# ======================================================
# üöÄ PROD STAGE ‚Äì Deploy Producci√≥n
# ======================================================
- stage: PROD
  displayName: "Deploy to Production"
  dependsOn: QA
  variables:
    - group: minishop-prod
  jobs:
  - deployment: DeployPROD
    displayName: "Deploy PROD"
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          # üîß Backend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy backend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_API_NAME)'
              package: '$(Pipeline.Workspace)/drop/server.zip'
              startUpCommand: 'npm start'
              runtimeStack: 'NODE|20-lts'

          # üé® Frontend PROD
          - task: AzureWebApp@1
            displayName: "üöÄ Deploy frontend PROD"
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webAppLinux'
              appName: '$(AZURE_WEBAPP_FRONT_NAME)'
              package: '$(Pipeline.Workspace)/drop/client.zip'
              startUpCommand: 'npx serve -s build -l 8080'
              runtimeStack: 'NODE|20-lts'
